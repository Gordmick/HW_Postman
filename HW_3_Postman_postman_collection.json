{
	"info": {
		"_postman_id": "db18e707-d7ad-4652-b22b-b9c8056ccf32",
		"name": "HW_3 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"\r",
							" // Приходящий токен необходимо передать во все остальные запросы.\r",
							" var response = pm.response.json();\r",
							" pm.environment.set(\"token_1\", response.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Mike",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"\r",
							"var response = pm.response.json();\r",
							"var schema = {     \r",
							"  \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"           \"person\":{\r",
							"             \"type\":\"object\", \r",
							"               \"properties\": {\r",
							"                \"u_age\": {\r",
							"                  \"type\":\"integer\"\r",
							"                },\r",
							"                 \"u_name\": {\r",
							"                   \"type\":\"array\",  \r",
							"                     \"items\":[\r",
							"                       {\r",
							"                      \"type\": \"string\"\r",
							"                       },\r",
							"                       {\r",
							"                       \"type\":\"integer\"\r",
							"                       }, \r",
							"                       {\r",
							"                        \"type\":\"integer\" \r",
							"                       }\r",
							"                    ]\r",
							"                 },   \r",
							"               \"u_salary_1_5_year\": \r",
							"               {\r",
							"                 \"type\":\"integer\"\r",
							"               }\r",
							"               },\r",
							"                 \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"                 },\r",
							"          \"qa_salary_after_12_months\":           \r",
							"          {\r",
							"            \"type\":\"integer\"\r",
							"          },\r",
							"           \"qa_salary_after_6_months\":\r",
							"           {\r",
							"             \"type\":\"integer\"\r",
							"           }, \r",
							"           \"start_qa_salary\":\r",
							"           {\r",
							"             \"type\":\"integer\"\r",
							"           }\r",
							"        },\r",
							"          \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"        \r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var salary = pm.environment.get(\"salary_1\");\r",
							"  \r",
							"pm.test(\"Check salary*2 = qa_salary_after_6_months\", function () {\r",
							" pm.expect(response.qa_salary_after_6_months).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*2.9 = qa_salary_after_12_months\", function () {\r",
							" pm.expect(response.qa_salary_after_12_months).to.eql(salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*4 = u_salary_1_5_year\", function () {\r",
							" pm.expect(response.person.u_salary_1_5_year).to.eql(salary*4);\r",
							"});\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"var salary_1_5 = response.person.u_salary_1_5_year\r",
							"pm.environment.set(\"salary_1_5\", salary_1_5);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"age\": {{age_1}},\r\n  \"salary\": {{salary_1}},\r\n  \"name\": \"{{name_1}}\",\r\n   \"auth_token\":\"{{token_1}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе.\r",
							"var response = pm.response.json();\r",
							"var schema = {     \r",
							"  \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var salary = pm.environment.get(\"salary_1\");\r",
							"\r",
							"pm.test(\"Check salary*2\", function () {\r",
							" pm.expect(salary*2).to.eql(+response.salary[1]);\r",
							"});\r",
							"pm.test(\"Check salary*3\", function () {\r",
							" pm.expect(salary*3).to.eql(+response.salary[2]);\r",
							"});\r",
							"// Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"Check salary[2] > salary[1]\", function () { \r",
							"    pm.expect(+response.salary[2]).to.be.above(+response.salary[1]); \r",
							"}); \r",
							"pm.test(\"Check salary[2] > salary[0]\", function () { \r",
							"    pm.expect(+response.salary[2]).to.be.above(response.salary[0]); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age_1}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name_1}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token_1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"\r",
							"var response = pm.response.json();\r",
							"var schema = {     \r",
							"  \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\",\r",
							"    },\r",
							"    \"name\":{\r",
							"      \"type\": \"string\"  \r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var request = request.data;\r",
							"var weight = request.weight;\r",
							"\r",
							"pm.test(\"daily_food = weight*0,012\", function () {\r",
							" pm.expect(weight*0.012).to.eql(+response.daily_food);\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep = weight*2,5\", function () {\r",
							" pm.expect(weight*2.5).to.eql(+response.daily_sleep);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age_1}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "80",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name_1}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token_1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"//  Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Проверка структуры json в ответе.\r",
							"var response = pm.response.json();\r",
							"var schema = {   \r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\" ],\r",
							"    \"required\" :[\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ] ,\r",
							"    \"required\" :[\r",
							"        \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//  Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"var name = pm.environment.get(\"name_1\");\r",
							"  \r",
							"pm.test(\"name response = name environments\", function () {\r",
							" pm.expect(response.name).to.eql(name);\r",
							"});\r",
							"\r",
							"//  Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var request = request.data;\r",
							"pm.test(\"response.age = request.age\", function () {\r",
							" pm.expect(response.age).to.eql(request.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age_1}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name_1}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token_1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token_1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}