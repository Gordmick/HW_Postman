{
	"info": {
		"_postman_id": "b04c634b-0448-441b-83aa-88c85f8f7eff",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First_code_200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверяем, что в body приходит правильный string\r",
							"pm.test(\"Check string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3 HW_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить respone body в json\r",
							"var response = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)  \r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(response.name).to.eql(\"Mikhail\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.) \r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(response.age).to.eql(\"36\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.) \r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(response.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var request = request.data;\r",
							"    console.log(\"request = \" , request) \r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(response.name).to.eql(request.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(response.age).to.eql(request.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = parseInt(request.salary)\r",
							"    pm.test(\"Check salary from request\", function () {\r",
							"    pm.expect(response.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var resp_family = response.family \r",
							"    console.log(\"Family = \" , resp_family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var u_salary_1_5_year = response.family.u_salary_1_5_year\r",
							"    pm.test(\"Check u_salary_1_5_year = salary*4\", function () {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(request.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mikhail",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mikhail",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3 HW_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var response = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var request = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {  \r",
							"    pm.expect(response.name).to.eql(request.name); \r",
							"}); \r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {  \r",
							"    pm.expect(response.age).to.eql(request.age); \r",
							"}); \r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {  \r",
							"    pm.expect(response.salary).to.eql(parseInt(request.salary)); \r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var resp_family = response.family \r",
							"    console.log(\"Family = \" , resp_family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog include 'name'\", function () { \r",
							"    var dogname = response.family.pets.dog;\r",
							"    pm.expect(dogname).to.include.key(\"name\"); \r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog include 'age'\", function () { \r",
							"    var dogage = response.family.pets.dog;\r",
							"    pm.expect(dogage).to.include.key(\"age\"); \r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name eql 'Luky'\", function ()  { \r",
							"   var dognameLuky = response.family.pets.dog.name;\r",
							"   pm.expect(dognameLuky).to.have.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age eql '4'\", function ()  { \r",
							"   var dogage4 = response.family.pets.dog.age;\r",
							"   pm.expect(dogage4).to.have.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Mikhail&age=36&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mikhail"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4 HW_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"    var response = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"    var request = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(response.name).to.eql(request.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () { \r",
							"    var request_age = parseInt(request.age)\r",
							"    pm.expect(response.age).to.eql(request_age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"    var req_salary = parseInt(request.salary)\r",
							"    console.log(\"req_salary = \" +req_salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"    var resp_salary = response.salary\r",
							"    console.log(\"resp_salary = \" +resp_salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"//var resp_salary_0 = response.salary[0]\r",
							"console.log(\"resp_salary_0 = \" +response.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary_1 = \" +response.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary_2 = \" +response.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check resp_salary_0 = req_salary\", function () {\r",
							"    var resp_salary_0 = response.salary[0]\r",
							"    pm.expect(resp_salary_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check resp_salary_1 = req_salary*2\", function () {\r",
							"    var resp_salary_1 = parseInt(response.salary[1])\r",
							"    pm.expect(resp_salary_1).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check resp_salary_2 = req_salary*3\", function () {\r",
							"    var resp_salary_2 = parseInt(response.salary[2])\r",
							"    pm.expect(resp_salary_2).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name_1\", response.name);\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age_1\", response.age);\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary_1\", response.salary[0]);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var count = 1;\r",
							"for(let i of response.salary){\r",
							"    console.log(count, \"salary\", i)\r",
							"    count++\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name_1}}&age={{age_1}}&salary={{salary_1}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name_1}}"
						},
						{
							"key": "age",
							"value": "{{age_1}}"
						},
						{
							"key": "salary",
							"value": "{{salary_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2 HW_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response have start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"response have person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person key 1 = salary\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"//var Person = resp.person; \r",
							"// for(var i in Person) { \r",
							"   //  if (typeof(Person[i]) === 'object') { \r",
							"    //     var array_person = Person.u_name; \r",
							"    //     for (var j in array_person) { \r",
							"     //   console.log(\"u_name\",  array_person[j]) \r",
							"    //     } \r",
							"    // } \r",
							"  // else { \r",
							"   //    console.log(i, Person[i]) \r",
							"  // } \r",
							"//}\r",
							"\r",
							"for ( k in resp.person) {\r",
							"    console.log(k + \" = \" + resp.person[k]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name_1}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age_1}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}